name: CD - Deploy Backend Services to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: "Name of the AKS Cluster to deploy to"
        required: true
        default: "rinsorincoaks"
      aks_resource_group:
        description: "Resource Group of the AKS Cluster"
        required: true
        default: "sit722-week08-rg"
      aks_acr_name:
        description: "Name of ACR"
        required: true
        default: "rinsorincoacr"

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production

    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set Kubernetes context (get AKS credentials)
        run: |
          az aks get-credentials --resource-group ${{ github.event.inputs.aks_resource_group }} --name ${{ github.event.inputs.aks_cluster_name }} --overwrite-existing

      - name: Try to attach ACR to AKS (may fail if caller lacks Owner) - non-fatal
        run: |
          echo "Attempting az aks update --attach-acr (will not fail job if it errors)"
          az aks update --name ${{ github.event.inputs.aks_cluster_name }} --resource-group ${{ github.event.inputs.aks_resource_group }} --attach-acr ${{ github.event.inputs.aks_acr_name }} || true

      - name: Create namespace and create/update ACR imagePullSecret
        run: |
          # change NAMESPACE if your manifests use a different one
          NAMESPACE=default

          # create namespace if it doesn't exist
          kubectl create namespace $NAMESPACE || true

          # recreate secret (delete first to avoid stale creds)
          kubectl delete secret acr-pull-secret -n $NAMESPACE --ignore-not-found=true

          # create docker-registry secret using GitHub Secrets
          kubectl create secret docker-registry acr-pull-secret \
            --docker-server=${{ secrets.ACR_LOGIN_SERVER }} \
            --docker-username=${{ secrets.ACR_USERNAME }} \
            --docker-password=${{ secrets.ACR_PASSWORD }} \
            --namespace $NAMESPACE

          echo "Created acr-pull-secret in namespace: $NAMESPACE"

      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          echo "Deploying backend infrastructure..."
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml

      - name: Deploy Backend Microservices (Product, Order)
        run: |
          echo "Deploying backend microservices..."
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml

      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product and Order LoadBalancer IPs (up to 5 minutes)..."
          PRODUCT_IP=""
          ORDER_IP=""
          NAMESPACE=default

          for i in $(seq 1 60); do
            echo "Attempt $i/60..."
            # try ip then hostname (some clouds return hostname)
            PRODUCT_IP=$(kubectl get svc product-service-w08e1 -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -z "$PRODUCT_IP" ]]; then
              PRODUCT_IP=$(kubectl get svc product-service-w08e1 -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            fi

            ORDER_IP=$(kubectl get svc order-service-w08e1 -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].ip}' 2>/dev/null || true)
            if [[ -z "$ORDER_IP" ]]; then
              ORDER_IP=$(kubectl get svc order-service-w08e1 -n $NAMESPACE -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' 2>/dev/null || true)
            fi

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "Product Service IP/Hostname: $PRODUCT_IP"
              echo "Order Service IP/Hostname: $ORDER_IP"
              break
            fi
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "Timed out waiting for LoadBalancer IPs. Debug output follows:"
            kubectl get svc product-service-w08e1 -n $NAMESPACE -o wide || true
            kubectl get svc order-service-w08e1 -n $NAMESPACE -o wide || true
            kubectl get pods -n $NAMESPACE -o wide || true
            exit 1
          fi

          echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
          echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV

      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT

      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      - name: Logout from Azure
        run: az logout
